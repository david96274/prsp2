import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import random

# ========== C√ÄI ƒê·∫∂T GIAO DI·ªÜN CHUNG ==========
st.set_page_config(page_title="Recommendation System", layout="wide")
st.title("Recommendation System: ")
st.markdown("<h1 style='color:black; font-size: 30px;'> <b>Th·ªùi Trang Nam.</b></h1>", unsafe_allow_html=True)

menu = ["Home", "Project Introduction", "Achievements", "Users"]
choice = st.sidebar.selectbox('Menu', menu)
st.sidebar.markdown("---")
st.sidebar.image("shoppee_menu.jpg", use_container_width=True)
st.sidebar.markdown("---")
st.sidebar.markdown("üë©‚Äçüè´ **Gi·∫£ng vi√™n:**")
st.sidebar.info("C√¥: Khu·∫•t Th√πy Ph∆∞∆°ng")
st.sidebar.markdown("üéñÔ∏è **Th·ª±c hi·ªán b·ªüi:**")
st.sidebar.info("D∆∞∆°ng ƒê·∫°i D≈©ng")
st.sidebar.info("Nguy·ªÖn Th·ªã C·∫©m Thu")
st.sidebar.markdown("üìÖ **Ng√†y b√°o c√°o:** 13/04/2025")

# ========== H√ÄM HI·ªÇN TH·ªä S·∫¢N PH·∫®M ==========
def display_recommended_products(recommended_products, cols=3):
    for i in range(0, len(recommended_products), cols):
        columns = st.columns(cols)
        for j, col in enumerate(columns):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    if isinstance(product['image'], str) and product['image']:
                        try:
                            st.image(product['image'], caption=product['product_name'], use_container_width=True)
                        except Exception as e:
                            st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh cho s·∫£n ph·∫©m '{product['product_name']}': {e}")

                    # Hi·ªÉn th·ªã t√™n v√† m√£ s·∫£n ph·∫©m
                    st.markdown(f"**{product['product_name']}**")
                    st.write(f"M√£ s·∫£n ph·∫©m: `{product['product_id']}`")  # üëâ TH√äM D√íNG N√ÄY

                    # Hi·ªÉn th·ªã gi√° ti·ªÅn n·∫øu c√≥
                    if pd.notna(product.get('price', None)):
                        try:
                            rounded_price = round(float(product['price']))
                            st.write(f"**Gi√°:** {rounded_price:,.0f} VNƒê")
                        except:
                            pass

                    # M√¥ t·∫£ s·∫£n ph·∫©m
                    exp = st.expander(" M√¥ t·∫£")
                    truncated = ' '.join(str(product.get('Content', '')).split()[:30]) + "..."
                    exp.write(truncated)



# ========== TRANG CH·ª¶ ==========
if choice == 'Home':  
    st.subheader("[Trang ch·ªß](https://shopee.vn/)")
    st.image('shoppee4.jpg', use_container_width=True)
    st.write('ƒê·ªí √ÅN T·ªêT NGHI·ªÜP: DL07_DATN_K302 ')

# ========== GI·ªöI THI·ªÜU D·ª∞ √ÅN ==========
elif choice == 'Project Introduction':    
    st.image('shoppee1.jpg', use_container_width=True)
    st.markdown("### [ƒê·ªì √°n TN Data Science](https://csc.edu.vn/data-science-machine-learning/Do-An-Tot-Nghiep-Data-Science---Machine-Learning_229)")
    st.write("""
        - Trong b·ªëi c·∫£nh th·ªã tr∆∞·ªùng th·ªùi trang nam tr·ª±c tuy·∫øn tr√™n Shopee ng√†y c√†ng ph√°t tri·ªÉn, vi·ªác gi√∫p ng∆∞·ªùi d√πng d·ªÖ d√†ng kh√°m ph√° nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† phong c√°ch c√° nh√¢n tr·ªü n√™n v√¥ c√πng quan tr·ªçng. Vi·ªác x√¢y d·ª±ng m·ªôt h·ªá th·ªëng g·ª£i √Ω th√¥ng minh, nh·∫±m gi·∫£i quy·∫øt b√†i to√°n v·ªÅ s·ª± qu√° t·∫£i th√¥ng tin v√† n√¢ng cao tr·∫£i nghi·ªám mua s·∫Øm th·ªùi trang nam cho ng∆∞·ªùi d√πng Shopee.
        - S·ª≠ d·ª•ng hai ph∆∞∆°ng ph√°p:
            - **Collaborative Filtering:**
            - **Content-Based Filtering:**
    """)

# ========== TH√ÄNH T·ª∞U ==========
elif choice == 'Achievements': 
    st.image('CF_CBF.jpg', use_container_width=True)
    st.write('Collaborative Filtering:')
    st.image('SVD.jpg', use_container_width=True)
    st.write('==> Ch·ªçn model SVD c·ªßa Surprise l√† t·ªëi ∆∞u nh·∫•t.')
    st.write('Content-Based Filtering:')
    st.image('gensim_cosine.jpg', use_container_width=True)
    st.write("""
        - Xin ph√©p s·ª≠ d·ª•ng cosine similarity.
        - X√¢y h·ªá th·ªëng g·ª£i √Ω t·∫•t c·∫£ s·∫£n ph·∫©m --> nhi·ªÅu ng∆∞·ªùi d√πng: gensim (TfidfModel, Similarity)
    """)

# ========== NG∆Ø·ªúI D√ôNG ==========
elif choice == 'Users':
    st.image('shoppee2.jpg', use_container_width=True)

    # ===== LOAD D·ªÆ LI·ªÜU C·∫¶N THI·∫æT =====
    with open('products_df.pkl', 'rb') as f:
        df_products = pickle.load(f)
    with open('recommendations_dict.pkl', 'rb') as f:
        recommendations_dict = pickle.load(f)
    with open("svd_model.pkl", "rb") as f:
        svd_model = pickle.load(f)
    with open("sample_df.pkl", "rb") as f:
        ratings_df = pickle.load(f)
    with open("products_name_df.pkl", "rb") as f:
        products_name_df = pickle.load(f)

    # ===== G·ª¢I √ù CONTENT-BASED =====


    st.markdown("## ¬†G·ª£i √Ω theo s·∫£n ph·∫©m b·∫°n ƒë√£ ch·ªçn")

    # Thay th·∫ø selectbox b·∫±ng text input ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p t·ª´ kh√≥a
    keyword = st.text_input("Nh·∫≠p t·ª´ kh√≥a s·∫£n ph·∫©m (v√≠ d·ª•: √°o kho√°c)")

    # L·ªçc s·∫£n ph·∫©m d·ª±a tr√™n t·ª´ kh√≥a
    if keyword:
        filtered_products = df_products[df_products['product_name'].str.contains(keyword, case=False, na=False)]

        if not filtered_products.empty:
            # ∆Øu ti√™n s·∫£n ph·∫©m c√≥ h√¨nh ·∫£nh
            products_with_image = filtered_products[filtered_products['image'].notna() & (filtered_products['image'] != '')]
            products_without_image = filtered_products[filtered_products['image'].isna() | (filtered_products['image'] == '')]

            # L·∫•y t·ªëi ƒëa 20 s·∫£n ph·∫©m, ∆∞u ti√™n c√≥ h√¨nh ·∫£nh
            top_n = 20
            suggested_products = pd.concat([products_with_image.head(top_n),
                                            products_without_image]).head(top_n)

            if not suggested_products.empty:
                # Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m ƒë√£ l·ªçc ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
                product_options = [(row['product_name'], row['product_id']) for _, row in suggested_products.iterrows()]
                selected_product = st.selectbox("Ch·ªçn s·∫£n ph·∫©m t·ª´ g·ª£i √Ω", options=product_options, format_func=lambda x: x[0])

                if selected_product:
                    selected_name = selected_product[0]
                    selected_ma_sp = selected_product[1]

                    st.write("T√™n s·∫£n ph·∫©m ƒë√£ ch·ªçn:", selected_name)
                    st.write("M√£ s·∫£n ph·∫©m:", selected_ma_sp)

                    selected_info = df_products[df_products['product_id'] == selected_ma_sp]

                    if not selected_info.empty:
                        product_row = selected_info.iloc[0]
                        product_name = product_row['product_name']
                        product_image = product_row['image']
                        product_content = product_row['Content']
                        product_price = product_row['price']

                        st.markdown(f"### {product_name}")

                        if pd.notna(product_image) and product_image != "":
                            st.image(product_image, caption=product_name, use_container_width=True)

                        truncated_desc = ' '.join(str(product_content).split()[:50]) + "..."
                        st.write("**M√¥ t·∫£:**", truncated_desc)

                        if pd.notna(product_price):
                            st.write("**Gi√° ti·ªÅn:**", f"{round(product_price):,} VNƒê")

                        st.markdown("### S·∫£n ph·∫©m li√™n quan b·∫°n c√≥ th·ªÉ th√≠ch:")
                        related_ids = recommendations_dict.get(selected_ma_sp, [])
                        # L·ªçc c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±
                        related_products = df_products[df_products['product_id'].isin(related_ids)]

                        # ∆Øu ti√™n s·∫£n ph·∫©m c√≥ ·∫£nh
                        with_images_related = related_products[related_products['image'].notna() & (related_products['image'] != '')]
                        without_images_related = related_products[related_products['image'].isna() | (related_products['image'] == '')]

                        # K·∫øt h·ª£p ƒë·ªß 9 s·∫£n ph·∫©m: ∆∞u ti√™n ·∫£nh, thi·∫øu th√¨ b·ªï sung kh√¥ng ·∫£nh
                        combined_products = pd.concat([with_images_related, without_images_related]).head(9)

                        # Hi·ªÉn th·ªã g·ª£i √Ω
                        display_recommended_products(combined_products, cols=3)

            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a n√†y.")

        else:
            st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a n√†y.")

    else:
        st.info("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m.")

    st.image('shoppee3.jpg', use_container_width=True)




    # ===== G·ª¢I √ù THEO USER =====

    st.markdown("---")
    st.markdown("## üîÄ G·ª£i √Ω hybrid: K·∫øt h·ª£p h√†nh vi & n·ªôi dung")

    # G·ª£i √Ω user c√≥ nhi·ªÅu ƒë√°nh gi√°
    top_active_users = ratings_df['user_id'].value_counts().head(10).index.tolist()
    st.write('M·ªôt s·ªë user ho·∫°t ƒë·ªông nhi·ªÅu:', top_active_users)

    user_input = st.text_input("Nh·∫≠p m√£ ng∆∞·ªùi d√πng (user_id):")

    if user_input:
        try:
            user_id = int(user_input)
            rated_products = ratings_df[ratings_df["user_id"] == user_id]["product_id"].tolist()
            all_products = df_products["product_id"].tolist()
            unrated_products = [pid for pid in all_products if pid not in rated_products]

            # N·∫øu user ch∆∞a t·ª´ng ƒë√°nh gi√°
            if len(rated_products) == 0:
                st.warning("Ng∆∞·ªùi d√πng ch∆∞a c√≥ l·ªãch s·ª≠ ƒë√°nh gi√°. ƒêang s·ª≠ d·ª•ng h·ªá th·ªëng content-based.")
                random_pid = random.choice(df_products["product_id"].tolist())
                content_ids = recommendations_dict.get(random_pid, [])[:9]
                hybrid_df = df_products[df_products["product_id"].isin(content_ids)]
            else:
                # --- Collaborative filtering ---
                predictions = []
                for pid in unrated_products:
                    pred = svd_model.predict(user_id, pid)
                    predictions.append((pid, pred.est))

                top_preds_cf = sorted(predictions, key=lambda x: x[1], reverse=True)
                top_cf_ids = [pid for pid, _ in top_preds_cf[:20]]  # l·∫•y nhi·ªÅu h∆°n 9

                # --- Content-based t·ª´ c√°c s·∫£n ph·∫©m ƒë√£ rating ---
                content_ids = []
                for pid in rated_products:
                    content_ids.extend(recommendations_dict.get(pid, []))
                content_ids = list(set(content_ids))  # b·ªè tr√πng

                # --- Tr·ªôn ƒëi·ªÉm g·ª£i √Ω v·ªõi tr·ªçng s·ªë ---
                hybrid_score = {}
                for i, pid in enumerate(top_cf_ids):
                    hybrid_score[pid] = hybrid_score.get(pid, 0) + (20 - i) * 1.0  # collaborative tr·ªçng s·ªë 1.0

                for i, pid in enumerate(content_ids):
                    hybrid_score[pid] = hybrid_score.get(pid, 0) + (20 - i) * 0.5  # content tr·ªçng s·ªë 0.5

                # --- Lo·∫°i s·∫£n ph·∫©m ƒë√£ ƒë√°nh gi√°
                for pid in rated_products:
                    hybrid_score.pop(pid, None)

                # --- S·∫Øp x·∫øp theo score v√† l·∫•y top 9
                sorted_hybrid_ids = sorted(hybrid_score.items(), key=lambda x: x[1], reverse=True)
                final_ids = [pid for pid, _ in sorted_hybrid_ids][:9]

                hybrid_df = df_products[df_products["product_id"].isin(final_ids)]

            # ∆Øu ti√™n s·∫£n ph·∫©m c√≥ ·∫£nh
            with_images = hybrid_df[hybrid_df['image'].notna() & (hybrid_df['image'] != '')]
            without_images = hybrid_df[~hybrid_df['product_id'].isin(with_images['product_id'])]
            combined_df = pd.concat([with_images, without_images]).head(9)

            st.markdown("### üß† G·ª£i √Ω d√†nh cho b·∫°n:")
            display_recommended_products(combined_df, cols=3)

        except ValueError:
            st.warning("Vui l√≤ng nh·∫≠p `user_id` h·ª£p l·ªá (s·ªë nguy√™n).")







